/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

#define DEFAULT     0
#define SYMNUM      1
#define PROG        2
#define MISC        3
#define FKEYS       4
#define WORKSPACES  5
#define HELP        6
#define MOUSE       7

&mt {
  tapping-term-ms = <250>;
};

/ {
  combos {
    compatible = "zmk,combos";

    combo_alt {
      timeout-ms = <50>;
      key-positions = <13 15>;
      bindings = <&kp LALT>;
    };

    combo_sfls {
      timeout-ms = <50>;
      key-positions = <14 16>;
      bindings = <&tog HELP>;
    };

    combo_ws_change {
      timeout-ms = <50>;
      key-positions = <16 19>;
      bindings = <&sl WORKSPACES>;
    };
  };
};

/{
  macros {
    // Zellij workspace switcher
    // Used on HELP layer, switches back to default layer
    se_sw: se_sw {
      compatible = "zmk,behavior_macro";

      #binding-cells = <0>;

      wait-ms = <40>;
      tap-ms = <40>;
      bindings
        = <&kp LC(G)>
        , <&kp LC(O)>
        , <&kp W>
        , <&tog DEFAULT>
        ;
      };
  };

  // Caps word that switches to default layer after firing
  c_w: c_w {
      compatible = "zmk,behavior_macro";

      #binding-cells = <0>;

      bindings
        = <&caps_word>
        , <&tog DEFAULT>
        ;
    };
};

/ {
        keymap {
                compatible = "zmk,keymap";

// --- BASE LAYER
                default_layer {
                        bindings = <
   &kp TAB        &kp Q &kp W &kp E &kp R &kp T    &kp Y &kp U  &kp I     &kp O   &kp P    &kp DEL
   &mt LCTRL ESC  &kp A &kp S &kp D &kp F &kp G    &kp H &kp J  &kp K     &kp L   &kp SEMI &lt MISC NUBS
   &kp LSHFT      &kp Z &kp X &kp C &kp V &kp B    &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp APOS
                        &lt FKEYS GRAVE &mo PROG &kp SPACE   &mt LSHFT BSPC &lt SYMNUM RET &kp LGUI
                        >;
                };

// --- SYMBOLS AND NUMBERS
                symbolsnumbers_layer {
                        bindings = <

   &trans &kp N1    &kp N2     &kp N3      &kp N4    &kp N5       &kp N6    &kp N7   &kp N8   &kp N9    &kp N0 &trans
   &trans &kp CARET &kp N0     &kp DLLR    &kp PRCNT &trans       &kp LEFT  &kp DOWN &kp UP   &kp RIGHT &trans &trans
   &trans &kp EXCL  &kp LS(N2) &kp LS(N3)  &kp DLLR  &kp PRCNT    &kp CARET &kp AMPS &kp STAR &trans    &trans &trans
                                        &trans &trans &trans       &trans &trans &trans
                        >;
                };

// --- PROGRAMMING
                programming_layer {
                        bindings = <
   &trans &trans &trans &trans    &trans    &trans       &trans           &kp LG(E) &kp LG(W) &kp LG(R) &trans &trans
   &trans &trans &trans &kp LPAR  &kp LBRC  &kp LBKT     &kp RBKT         &kp RBRC  &kp RPAR  &kp NUHS  &trans &trans
   &trans &trans &trans &kp GRAVE &kp MINUS &kp UNDER    &kp EQUAL        &kp PLUS  &kp LT    &kp GT    &trans &trans
                                          &trans   &trans   &trans        &trans   &trans    &trans
                        >;
                };

// --- MISC
                misc_layer {
                        bindings = <
   &bootloader  &trans        &trans        &trans        &trans        &trans              &bt BT_DISC 0   &bt BT_DISC 1   &bt BT_DISC 2   &bt BT_DISC 3   &bt BT_DISC 4 &trans
   &trans       &trans        &kp C_SLEEP   &trans        &trans        &trans              &kp C_PREV      &kp C_VOL_DN    &kp C_VOL_UP    &kp C_NEXT      &trans        &trans
   &bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4        &kp C_PP        &kp C_MUTE      &trans          &trans          &trans        &trans
                                                            &trans   &trans   &trans        &trans   &trans    &trans
                        >;
                };

// --- FKEYS
                fkeys_layer {
                        bindings = <
   &trans &kp F1  &kp F2  &kp F3  &kp F4  &kp F5        &kp F6  &kp F7  &kp F8  &kp F9  &kp F10 &trans
   &trans &kp F11 &kp F12 &kp F13 &kp F14 &kp F15       &kp F16 &kp F17 &kp F18 &kp F19 &kp F20 &trans
   &trans &kp F22 &kp F23 &kp F24 &trans  &trans        &trans  &trans  &trans  &trans  &trans  &trans
                         &trans   &trans   &trans       &trans   &trans    &trans
                        >;
                };

// --- WORKSPACE SWITCHING
                workspace_layer {
                        bindings = <
   &trans &kp LG(N1)      &kp LG(N2)      &kp LG(N3)  &kp LG(N4)  &kp LG(N5)          &kp LG(N6)      &kp LG(N7)      &kp LG(N8)      &kp LG(N9)      &trans &trans
   &trans &trans          &trans          &trans      &trans      &trans              &trans          &trans          &trans          &trans          &trans &trans
   &trans &kp LS(LG(N1))  &kp LS(LG(N2))  &kp LG(N3)  &kp LG(N4)  &kp LS(LG(N5))      &kp LS(LG(N6))  &kp LS(LG(N7))  &kp LS(LG(N8))  &kp LS(LG(N9))  &trans &trans
                                        &trans   &trans   &trans          &trans   &trans    &trans
                        >;
                };

// --- HELP
                help_layer {
                        bindings = <
   &trans &trans &se_sw &trans  &trans &trans            &trans &trans &trans &trans &trans &trans
   &trans &trans &trans &kp DEL &trans &trans            &trans &trans &trans &trans &trans &trans
   &trans &trans &trans &c_w    &trans &trans            &trans &trans &trans &trans &trans &trans
                    &trans   &trans   &tog DEFAULT   &trans   &trans    &trans
                        >;
                };
        };

// --- MOUSE
                mouse_layer {
                        bindings = <
   &trans &trans &trans &trans &trans &trans   &trans &trans &trans &trans &trans &trans
   &trans &trans &trans &trans &trans &trans   &trans &trans &trans &trans &trans &trans
   &trans &trans &trans &trans &trans &trans   &trans &trans &mkp LCLK &mkp RCLK &trans &trans
                    &trans   &trans   &trans   &trans   &trans    &trans
                        >;
                };

// --- TEMPLATE
//                template_layer {
//                        bindings = <
//   &trans &trans &trans &trans &trans &trans   &trans &trans &trans &trans &trans &trans
//   &trans &trans &trans &trans &trans &trans   &trans &trans &trans &trans &trans &trans
//   &trans &trans &trans &trans &trans &trans   &trans &trans &trans &trans &trans &trans
//                    &trans   &trans   &trans   &trans   &trans    &trans
//                        >;
//                };
        };
};
